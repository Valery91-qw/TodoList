{"version":3,"sources":["dal/api.ts","utils/error-utils.ts","features/login/auth-reducer.ts","app/App-reducer.ts","features/todolists/todolists-reducer.ts","features/todolists/todolist/task/tasks-reducer.ts","component/addItemForm/AddItemForm.tsx","component/editableSpan/EditableSpan.tsx","features/todolists/todolist/task/Task.tsx","features/todolists/todolist/Todolist.tsx","features/todolists/TodolistsList.tsx","component/errorSnackbar/ErrorSnackbar.tsx","features/login/Login.tsx","app/App.tsx","reportWebVitals.ts","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","todoId","title","put","get","post","delete","tasksAPI","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppError","error","setAppStatus","status","handleServerNetworkError","message","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedIn","state","action","payload","value","authReducer","reducer","actions","isInitialized","setAppInitialized","appReducer","setTodolists","todolists","map","todo","filter","entityStatus","changeTodolistEntityStatus","index","findIndex","id","removeTodoList","splice","addTodolist","unshift","todolist","changeTodolistTitle","changeTodolistFilter","todolistsReducer","setTasks","tasks","removeTask","task","addTask","todoListId","updateTaskAC","extraReducers","builder","addCase","forEach","tasksReducer","updateTask","domainModel","getState","find","t","apiModel","deadline","description","priority","startDate","then","res","resultCode","catch","console","warn","AddItemForm","React","memo","props","useState","setTitle","setError","addItem","trim","TextField","size","disabled","onKeyPress","event","code","onChange","currentTarget","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","useCallback","editModeHandler","autoFocus","onBlur","onDoubleClick","Task","onRemoveHandler","onChangeHandler","changeTaskStatus","checked","Completed","New","onChangeTitle","newTitle","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","items","onChangeTodolistTitle","removeTodolist","onAllClickHandler","onActiveClickHandler","onCompleteClickHandler","tasksForTodo","Button","variant","TodolistsList","todoLists","useSelector","app","auth","addTaskCallback","todolistId","item","createTask","changeTaskStatusCallback","changeTaskTitleCallback","removeTaskCallback","removeTodolistCallback","changeTodolistFilterCallback","changeTodolistTitleCallback","addTodolistCallback","createTodolist","Grid","container","style","padding","spacing","allTodolistTasks","Paper","to","Alert","elevation","ErrorSnackbar","handleClose","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","type","FormControlLabel","control","App","logoutHandler","AppBar","position","Toolbar","edge","aria-label","Typography","marginLeft","LinearProgress","Container","fixed","exact","path","render","from","top","textAlign","width","CircularProgress","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1322ff47.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers:  {\r\n        'API-KEY': 'fc503820-69cf-441a-add2-ccdccedc3a76'\r\n    }\r\n})\r\n\r\nexport const todolistAPI = {\r\n    updateTodolist(todoId: string, title: string) {\r\n       return  instance.put<ResponseType>(`todo-lists/${todoId}`, {title})\r\n    },\r\n    getTodolists() {\r\n        return instance.get<Array<TodolistType>>(`todo-lists`)\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{item: TodolistType}>>(`todo-lists`, {title})\r\n    },\r\n    deleteTodolist(todoId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todoId}`)\r\n    }\r\n}\r\nexport const tasksAPI = {\r\n    updateTask(todoId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return  instance.put<ResponseType>(`todo-lists/${todoId}/tasks/${taskId}`, model)\r\n    },\r\n    getTasks(todoId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todoId}/tasks`)\r\n    },\r\n    createTask(todoId: string, title: string) {\r\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todoId}/tasks`, {title})\r\n    },\r\n    deleteTask(todoId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todoId}/tasks/${taskId}`)\r\n    }\r\n}\r\nexport const authAPI = {\r\n    login(data: LoginDataRequestType) {\r\n        return instance.post<ResponseType<{userId?: number}>>(`auth/login`, data)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{id: number, email: string, login: string}>>(`auth/me`)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType<{userId?: number}>>('auth/login');\r\n    },\r\n}\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\nexport enum TaskStatuses  {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\nexport type LoginDataRequestType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}","import { Dispatch } from 'redux';\r\nimport {setAppError, setAppStatus} from '../app/App-reducer';\r\nimport {ResponseType} from '../dal/api'\r\n\r\n// generic function\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppError({ error : data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppError({ error: 'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatus({ status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(setAppError({ error: error.message}))\r\n    dispatch(setAppStatus({ status: 'failed'}))\r\n}\r\n\r\ntype ErrorUtilsDispatchType = Dispatch\r\n","import { Dispatch } from 'redux'\r\nimport {setAppStatus} from \"../../app/App-reducer\";\r\nimport {authAPI, LoginDataRequestType} from \"../../dal/api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsLoggedIn(state, action: PayloadAction<{value: boolean}>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const { setIsLoggedIn } = slice.actions\r\n// thunks\r\nexport const loginTC = (data: LoginDataRequestType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatus({ status: 'loading'}))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if(res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedIn({value: true}))\r\n                dispatch(setAppStatus({ status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const logout = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatus({ status: 'loading'}))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedIn({value: false}))\r\n                dispatch(setAppStatus({ status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\n","import {authAPI} from \"../dal/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setIsLoggedIn} from \"../features/login/auth-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: initialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'app',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppStatus(state, action: PayloadAction<{status: RequestStatusType}>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppError(state, action: PayloadAction<{error: string | null}>){\r\n            state.error = action.payload.error\r\n        },\r\n        setAppInitialized(state, action: PayloadAction<{value: boolean}>){\r\n            state.isInitialized = action.payload.value\r\n        }\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\n\r\nexport const {setAppStatus, setAppError, setAppInitialized } = slice.actions\r\n\r\nexport const initializeApp = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatus({status :'loading'}))\r\n    authAPI.me().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedIn({value: true}));\r\n            dispatch(setAppStatus({ status: 'succeeded'}))\r\n        }\r\n        else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n        dispatch(setAppInitialized({value: true}));\r\n    })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type initialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n    isInitialized: boolean\r\n}","import {Dispatch} from \"redux\";\r\nimport {todolistAPI, TodolistType} from \"../../dal/api\";\r\nimport {RequestStatusType, setAppStatus} from \"../../app/App-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nconst slice = createSlice({\r\n    name: 'todolist',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setTodolists(state, action: PayloadAction<{ todolists: Array<TodolistType> }>) {\r\n            return action.payload.todolists.map(todo => ({...todo, filter: 'all', entityStatus: 'idle'}))\r\n        },\r\n        changeTodolistEntityStatus(state, action: PayloadAction<{ id: string, entityStatus: RequestStatusType }>) {\r\n            let index = state.findIndex(todo => todo.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.entityStatus\r\n        },\r\n        removeTodoList(state, action: PayloadAction<{ id: string }>) {\r\n            let index = state.findIndex(todo => todo.id === action.payload.id)\r\n            if (index > -1) {\r\n                state.splice(index, 1)\r\n            }\r\n        },\r\n        addTodolist(state, action: PayloadAction<{ todolist: TodolistType }>) {\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n        },\r\n        changeTodolistTitle(state, action: PayloadAction<{ title: string, id: string }>) {\r\n            let index = state.findIndex(todo => todo.id === action.payload.id)\r\n            state[index].title = action.payload.title\r\n        },\r\n        changeTodolistFilter(state, action: PayloadAction<{ filter: FilterType, id: string }>) {\r\n            let index = state.findIndex(todo => todo.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        }\r\n    }\r\n})\r\n\r\nexport const todolistsReducer = slice.reducer\r\n\r\nexport const {\r\n    setTodolists,\r\n    changeTodolistEntityStatus,\r\n    addTodolist,\r\n    changeTodolistTitle,\r\n    changeTodolistFilter,\r\n    removeTodoList } = slice.actions\r\n// Thunk\r\nexport const fetchTodolists = () => (dispatch: Dispatch) => {\r\n        dispatch(setAppStatus({ status: 'loading'}))\r\n        todolistAPI.getTodolists()\r\n            .then(res => {\r\n                dispatch(setTodolists({ todolists: res.data}))\r\n                dispatch(setAppStatus({ status: 'succeeded'}))\r\n            })\r\n}\r\nexport const deleteTodolis = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatus({ status: 'loading'}))\r\n    dispatch(changeTodolistEntityStatus({id: todolistId, entityStatus: 'loading'}))\r\n        todolistAPI.deleteTodolist(todolistId)\r\n            .then(res => {\r\n                if( res.data.resultCode === 0) {\r\n                    dispatch(removeTodoList({id: todolistId}))\r\n                    dispatch(setAppStatus({ status: 'succeeded'}))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n}\r\nexport const createTodolist = (title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n        todolistAPI.createTodolist(title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(addTodolist({todolist: res.data.data.item}))\r\n                    dispatch(setAppStatus({status: 'succeeded'}))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n}\r\nexport const updateTodolis = (id: string, title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n        todolistAPI.updateTodolist(id, title)\r\n            .then( res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(changeTodolistTitle({id, title}))\r\n                    dispatch(setAppStatus({status: 'succeeded'}))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n}\r\n//types\r\nexport type FilterType = \"all\" | \"active\" | \"completed\"\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterType\r\n    entityStatus: RequestStatusType\r\n}","import {TaskPriorities, tasksAPI, TaskStatuses, TaskType, UpdateTaskModelType} from \"../../../../dal/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {addTodolist, changeTodolistEntityStatus, removeTodoList, setTodolists} from \"../../todolists-reducer\";\r\nimport {RootStateType} from \"../../../../app/store\";\r\nimport {setAppStatus} from \"../../../../app/App-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../../../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setTasks(state, action:PayloadAction<{tasks: Array<TaskType>, todoId: string }>) {\r\n            state[action.payload.todoId] = action.payload.tasks\r\n        },\r\n        removeTask(state, action:PayloadAction<{todoId: string, taskId: string}>) {\r\n            const tasks = state[action.payload.todoId]\r\n            const index = tasks.findIndex(task => task.id === action.payload.taskId)\r\n            if(index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        },\r\n        addTask (state, action:PayloadAction<{task: TaskType}>) {\r\n            state[action.payload.task.todoListId].unshift(action.payload.task)\r\n        },\r\n        updateTaskAC(state, action:PayloadAction<{todoId: string, taskId: string, model: UpdateDomainTaskModelType}>) {\r\n            const tasks = state[action.payload.todoId]\r\n            const index = tasks.findIndex(task => task.id === action.payload.taskId)\r\n            if(index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.model}\r\n            }\r\n        }\r\n    },\r\n    extraReducers:(builder) => {\r\n        builder.addCase(addTodolist, (state, action) => {\r\n                state[action.payload.todolist.id] = [];\r\n        });\r\n        builder.addCase(removeTodoList,(state, action) => {\r\n                delete state[action.payload.id]\r\n        });\r\n        builder.addCase(setTodolists, (state, action) => {\r\n                action.payload.todolists.forEach(todo =>{\r\n                    debugger\r\n                    state[todo.id] = []\r\n                })\r\n        });\r\n    }\r\n})\r\n\r\nexport const tasksReducer = slice.reducer\r\n\r\nexport const {\r\n    updateTaskAC,\r\n    addTask ,\r\n    setTasks,\r\n    removeTask } = slice.actions\r\n//Thunk creator\r\nexport const fetchTasks = (todoId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatus({ status: 'loading'}))\r\n        tasksAPI.getTasks(todoId)\r\n            .then(res => {\r\n                dispatch(setTasks({ tasks: res.data.items, todoId}))\r\n                dispatch(setAppStatus({ status: 'succeeded'}))\r\n            })\r\n}\r\nexport const deleteTask = (taskId: string, todoId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    dispatch(changeTodolistEntityStatus({id: todoId,entityStatus:  'loading'}))\r\n        tasksAPI.deleteTask(todoId, taskId)\r\n            .then( res => {\r\n                if(res.data.resultCode === 0) {\r\n                    dispatch(removeTask({todoId, taskId}))\r\n                    dispatch(setAppStatus({status: 'succeeded'}))\r\n                    dispatch(changeTodolistEntityStatus({id: todoId, entityStatus: 'succeeded'}))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n}\r\nexport const createTask = (todoId: string, title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatus({ status: 'loading'}))\r\n    dispatch(changeTodolistEntityStatus({id: todoId, entityStatus: 'loading'}))\r\n        tasksAPI.createTask(todoId, title)\r\n            .then(res => {\r\n                if(res.data.resultCode === 0) {\r\n                    dispatch(addTask({task: res.data.data.item}))\r\n                    dispatch(setAppStatus({ status: 'succeeded'}))\r\n                    dispatch(changeTodolistEntityStatus({id: todoId, entityStatus: 'succeeded'}))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                    dispatch(changeTodolistEntityStatus({id: todoId, entityStatus:  'succeeded'}))\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n}\r\nexport const updateTask = (todoId: string, taskId: string, domainModel: UpdateDomainTaskModelType) => {\r\n    return (dispatch: Dispatch, getState: () => RootStateType) => {\r\n        dispatch(setAppStatus({ status: 'loading'}))\r\n        dispatch(changeTodolistEntityStatus({id: todoId, entityStatus :'loading'}))\r\n        const state = getState()\r\n        const task = state.tasks[todoId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n        tasksAPI.updateTask(todoId, taskId, apiModel)\r\n            .then(res => {\r\n                if(res.data.resultCode === 0) {\r\n                    dispatch(updateTaskAC({todoId, taskId, model: apiModel}))\r\n                    dispatch(setAppStatus({ status:'succeeded'}))\r\n                    dispatch(changeTodolistEntityStatus({id: todoId, entityStatus: 'succeeded'}))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n        })\r\n    }\r\n}\r\n//types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}","import React, {ChangeEvent, useState, KeyboardEvent} from \"react\";\r\nimport { IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\nexport type AddItemFormType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo( (props: AddItemFormType) => {\r\n\r\n    const [title, setTitle] = useState('')\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(event.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (event.code === \"Enter\") {\r\n            addItem()\r\n        }\r\n    }\r\n    return (<div>\r\n        <TextField size='small'\r\n                   disabled={props.disabled}\r\n                   value={title}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   onChange={onChangeHandler}\r\n                   error={!!error}\r\n                   label='Title'\r\n                   helperText={error}\r\n        />\r\n        <IconButton color='primary' onClick={addItem} disabled={props.disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>)\r\n} )","import React, {ChangeEvent, useCallback, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\nexport type EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [title, setTitle] = useState(props.value)\r\n\r\n    const onChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(event.currentTarget.value)\r\n    }, [])\r\n\r\n    const editModeHandler = useCallback(() => {\r\n        setEditMode(!editMode)\r\n        props.onChange(title)\r\n    }, [editMode, props, title])\r\n\r\n    return (editMode\r\n            ? <TextField size='small' onChange={onChange} value={title} autoFocus onBlur={editModeHandler}/>\r\n            : <span onDoubleClick={editModeHandler}>{title}</span>\r\n    )\r\n})","import {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../../../../component/editableSpan/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport React, {ChangeEvent, useCallback} from \"react\";\r\nimport {TaskStatuses} from \"../../../../dal/api\";\r\nimport {RequestStatusType} from \"../../../../app/App-reducer\";\r\n// Types\r\nexport type TaskPropsType = {\r\n    id: string\r\n    status: TaskStatuses\r\n    title: string\r\n    changeTaskTitle:(todolistId: string, id: string, newTitle: string) => void\r\n    removeTask: (id: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    todoId: string\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport const Task = React.memo( (props: TaskPropsType) => {\r\n\r\n    const onRemoveHandler = useCallback( () => {\r\n        props.removeTask(props.id, props.todoId)\r\n    }, [props] )\r\n    const onChangeHandler = useCallback( (event: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeTaskStatus(props.id, event.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New, props.todoId)\r\n    } , [props] )\r\n    const onChangeTitle = useCallback( (newTitle: string) => {\r\n        props.changeTaskTitle(props.todoId, props.id, newTitle)\r\n    }, [props] )\r\n    \r\n    return <div key={props.id} className={props.status === TaskStatuses.Completed ? 'is-done' : \"\"}>\r\n        <Checkbox color='primary' checked={props.status === TaskStatuses.Completed} onChange={onChangeHandler}/>\r\n        <EditableSpan value={props.title} onChange={onChangeTitle}/>\r\n        <IconButton color='primary' size='small' onClick={onRemoveHandler} disabled={props.entityStatus === 'loading'}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n} )\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {AddItemForm} from \"../../../component/addItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../../component/editableSpan/EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Task} from \"./task/Task\";\r\nimport {FilterType, TodolistDomainType} from \"../todolists-reducer\";\r\nimport {TaskStatuses, TaskType} from \"../../../dal/api\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTasks} from \"./task/tasks-reducer\";\r\n\r\n\r\nexport type TodolistPropsType = {\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTodolistFilter: (filter: FilterType, todolistId: string) => void\r\n    removeTask: (id: string, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTaskTitle: (todolistId: string, id: string, newTitle: string) => void\r\n    changeTodolistTitle: (todolistId: string, newTitle: string) => void\r\n    tasks: Array<TaskType>\r\n    todolist: TodolistDomainType\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo( ({demo = false, ...props}: TodolistPropsType) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        dispatch(fetchTasks(props.todolist.id))\r\n    }, [demo, dispatch, props.todolist.id])\r\n\r\n    // добовление таски\r\n    const addTask = useCallback( (title: string) => {\r\n            props.addTask(title, props.todolist.id)\r\n    },[props])\r\n    const onChangeTodolistTitle = useCallback( (newTitle: string) => {\r\n        props.changeTodolistTitle(newTitle, props.todolist.id)\r\n    }, [props] )\r\n    // удаление тудулиста\r\n    const removeTodolist = useCallback( () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    } , [props] )   // пачка колюэков на кнопки для фильтрации\r\n    const onAllClickHandler = useCallback( () => props.changeTodolistFilter('all', props.todolist.id) ,[props] )\r\n    const onActiveClickHandler = useCallback( () => props.changeTodolistFilter('active', props.todolist.id), [props] )\r\n    const onCompleteClickHandler = useCallback( () => props.changeTodolistFilter('completed', props.todolist.id), [props])\r\n\r\n    let tasksForTodo = props.tasks\r\n\r\n    if(props.todolist.filter === 'active') {\r\n        tasksForTodo = props.tasks.filter(task => task.status === TaskStatuses.New)\r\n    }\r\n    if(props.todolist.filter === 'completed') {\r\n        tasksForTodo = props.tasks.filter(task => task.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n            <EditableSpan value={props.todolist.title} onChange={onChangeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n             <Delete/>\r\n            </IconButton>\r\n            </h3>\r\n                <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n            <div>\r\n                {\r\n                    tasksForTodo.map(task => {\r\n                        return <Task key={task.id}\r\n                                     entityStatus={props.todolist.entityStatus}\r\n                                     id={task.id}\r\n                                     status={task.status}\r\n                                     title={task.title}\r\n                                     todoId={props.todolist.id}\r\n                                     changeTaskStatus={props.changeTaskStatus}\r\n                                     removeTask={props.removeTask}\r\n                                     changeTaskTitle={props.changeTaskTitle}/>\r\n                    })\r\n                }\r\n            </div>\r\n            <div>\r\n                <Button variant={props.todolist.filter === \"all\" ? \"contained\" : \"text\"} color='primary'\r\n                        onClick={onAllClickHandler}>All</Button>\r\n                <Button variant={props.todolist.filter === \"active\" ? \"contained\" : \"text\"} color='primary'\r\n                        onClick={onActiveClickHandler}>Active</Button>\r\n                <Button variant={props.todolist.filter === \"completed\" ? \"contained\" : \"text\"} color='primary'\r\n                        onClick={onCompleteClickHandler}>Completed</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n} )","import {TaskStatuses} from \"../../dal/api\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../../app/store\";\r\nimport {\r\n    changeTodolistFilter, createTodolist,\r\n    deleteTodolis,\r\n    fetchTodolists,\r\n    FilterType,\r\n    TodolistDomainType, updateTodolis\r\n} from \"./todolists-reducer\";\r\nimport React, {useCallback, useEffect} from \"react\";\r\nimport {createTask, deleteTask, TasksStateType, updateTask} from \"./todolist/task/tasks-reducer\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {AddItemForm} from \"../../component/addItemForm/AddItemForm\";\r\nimport {Todolist} from \"./todolist/Todolist\";\r\nimport {RequestStatusType} from \"../../app/App-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList = ({demo = false}: PropsType) => {\r\n\r\n    const todoLists = useSelector<RootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<RootStateType, TasksStateType>(state => state.tasks)\r\n    const status = useSelector<RootStateType, RequestStatusType>(state => state.app.status)\r\n    const isLoggedIn = useSelector<RootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(fetchTodolists())\r\n    }, [demo, dispatch, isLoggedIn])\r\n\r\n    // добовление task\r\n    const addTaskCallback = useCallback((title: string, todolistId: string) => {\r\n        dispatch(createTask(todolistId, title))\r\n    }, [dispatch])\r\n\r\n    // изменение фильтра task\r\n    const changeTaskStatusCallback = useCallback((id: string, status: TaskStatuses, todolistId: string) => {\r\n        dispatch(updateTask(todolistId, id, {status}))\r\n    }, [dispatch])\r\n\r\n    // изменение заголовка task\r\n    const changeTaskTitleCallback = useCallback((todolistId: string, id: string, newTitle: string,) => {\r\n        dispatch(updateTask(todolistId, id, {title: newTitle}))\r\n    }, [dispatch])\r\n\r\n    // удаление task\r\n    const removeTaskCallback = useCallback((todolistId: string, id: string) => {\r\n        dispatch(deleteTask(todolistId, id))\r\n    }, [dispatch])\r\n    // удаление todolist\r\n    const removeTodolistCallback = useCallback((id: string) => {\r\n        dispatch(deleteTodolis(id))\r\n    }, [dispatch])\r\n    // изменение отоброжающихся тасок в todolist\r\n    const changeTodolistFilterCallback = useCallback((filter: FilterType, todolistId: string) => {\r\n        dispatch(changeTodolistFilter({filter: filter, id: todolistId}))\r\n    }, [dispatch])\r\n    // изменение заголовка todolist\r\n    const changeTodolistTitleCallback = useCallback((newTitle: string, todolistId: string) => {\r\n        dispatch(updateTodolis(todolistId, newTitle))\r\n    }, [dispatch])\r\n    // добовление todolist\r\n    const addTodolistCallback = useCallback((title: string) => {\r\n        dispatch(createTodolist(title))\r\n    }, [dispatch])\r\n\r\n    if(!isLoggedIn) {\r\n        return <Redirect to={'/login'} />\r\n    }\r\n\r\n    return <><Grid container style={{padding: \"20px\"}}>\r\n        <AddItemForm addItem={addTodolistCallback} disabled={status === 'loading'}/>\r\n    </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todoLists.map(todolist => {\r\n\r\n                    let allTodolistTasks = tasks[todolist.id]\r\n\r\n                    return <Grid item key={todolist.id}>\r\n                        <Paper style={{padding: \"10px\"}}>\r\n                            <Todolist todolist={todolist}\r\n                                      key={todolist.id}\r\n                                      removeTask={removeTaskCallback}\r\n                                      tasks={allTodolistTasks}\r\n                                      changeTodolistFilter={changeTodolistFilterCallback}\r\n                                      addTask={addTaskCallback}\r\n                                      changeTodolistTitle={changeTodolistTitleCallback}\r\n                                      removeTodolist={removeTodolistCallback}\r\n                                      changeTaskTitle={changeTaskTitleCallback}\r\n                                      changeTaskStatus={changeTaskStatusCallback}\r\n                                      demo={demo}/>\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid></>\r\n}","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../../app/store\";\r\nimport {setAppError} from \"../../app/App-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<RootStateType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppError({ error: null}))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {RootStateType} from \"../../app/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const isLoggedIn = useSelector<RootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Invalid password length';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if(isLoggedIn) {\r\n        return <Redirect to={'/'} />\r\n    }\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email\r\n                            ? <div style={{color: 'red'}}>{formik.errors.email}</div>\r\n                            : null\r\n                        }\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password\r\n                            ? <div style={{color: 'red'}}>{formik.errors.password}</div>\r\n                            : null\r\n                        }\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}/>}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useCallback, useEffect} from 'react';\nimport './App.css';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport {CircularProgress, Container, LinearProgress} from \"@material-ui/core\";\nimport {TodolistsList} from \"../features/todolists/TodolistsList\";\nimport { useDispatch, useSelector} from \"react-redux\";\nimport {RootStateType} from \"./store\";\nimport {initializeApp, RequestStatusType} from \"./App-reducer\";\nimport {ErrorSnackbar} from \"../component/errorSnackbar/ErrorSnackbar\";\nimport {Route, Switch, Redirect, HashRouter} from 'react-router-dom';\nimport {Login} from \"../features/login/Login\";\nimport {logout} from \"../features/login/auth-reducer\";\n\ntype PropsType = {\n    demo?: boolean\n}\n\nfunction App({demo = false}: PropsType) {\n\n    const status = useSelector<RootStateType, RequestStatusType>(state => state.app.status)\n    const isInitialized = useSelector<RootStateType, boolean>(state => state.app.isInitialized)\n    const isLoggedIn = useSelector<RootStateType, boolean>(state => state.auth.isLoggedIn)\n    const dispatch = useDispatch()\n    useEffect(() => {\n        dispatch(initializeApp())\n    }, [dispatch])\n\n    const logoutHandler = useCallback(() => {\n        dispatch(logout())\n    }, [])\n\n    if (!isInitialized) {\n        return <div\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\n            <CircularProgress/>\n        </div>\n    }\n\n    return (\n        <HashRouter>\n        <div className=\"App\">\n            <ErrorSnackbar/>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                        <MenuIcon/>\n                    </IconButton>\n                    <Typography variant=\"h6\">\n                        News\n                    </Typography>\n                    {isLoggedIn && <Button style={{marginLeft : 'auto'}} color=\"inherit\" onClick={logoutHandler}>log out</Button>}\n                </Toolbar>\n                {status === 'loading' && <LinearProgress color=\"secondary\"/>}\n            </AppBar>\n            <Container fixed>\n                <Switch>\n                    <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\n                    <Route exact path={'/login'} render={() => <Login/>}/>\n                    <Route exact path={'/404'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\n                    <Redirect from={'*'} to={'/404'}/>\n                </Switch>\n            </Container>\n        </div>\n        </HashRouter>\n    );\n}\n\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers} from \"redux\";\r\nimport {tasksReducer} from \"../features/todolists/todolist/task/tasks-reducer\";\r\nimport {todolistsReducer} from \"../features/todolists/todolists-reducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport { appReducer } from \"./App-reducer\";\r\nimport {authReducer} from \"../features/login/auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunk)\r\n})\r\n\r\nexport type RootStateType = ReturnType<typeof rootReducer>","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./app/store\";\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n                <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}