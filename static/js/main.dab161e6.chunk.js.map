{"version":3,"sources":["dal/api.ts","utils/error-utils.ts","features/login/auth-reducer.ts","app/App-reducer.ts","features/todolists/todolists-reducer.ts","features/todolists/todolist/task/tasks-reducer.ts","component/addItemForm/AddItemForm.tsx","component/editableSpan/EditableSpan.tsx","features/todolists/todolist/task/Task.tsx","features/todolists/todolist/Todolist.tsx","features/todolists/TodolistsList.tsx","component/errorSnackbar/ErrorSnackbar.tsx","features/login/Login.tsx","app/App.tsx","reportWebVitals.ts","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","todoId","title","put","get","post","delete","tasksAPI","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppError","setAppStatus","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedIn","value","type","status","isInitialized","changeTodolistEntityStatus","id","entityStatus","updateTask","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","then","res","resultCode","updateTaskAC","catch","console","warn","AddItemForm","React","memo","props","useState","setTitle","setError","addItem","trim","TextField","size","disabled","onKeyPress","event","code","onChange","currentTarget","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","useCallback","editModeHandler","autoFocus","onBlur","onDoubleClick","Task","onRemoveHandler","removeTask","onChangeHandler","changeTaskStatus","checked","Completed","New","onChangeTitle","newTitle","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","todolist","setTasks","items","addTask","onChangeTodolistTitle","changeTodolistTitle","removeTodolist","onAllClickHandler","changeTodolistFilter","onActiveClickHandler","onCompleteClickHandler","tasksForTodo","filter","map","Button","variant","TodolistsList","todoLists","useSelector","state","todolists","app","auth","addTaskCallback","todolistId","item","createTask","changeTaskStatusCallback","changeTaskTitleCallback","removeTaskCallback","removeTodolistCallback","changeTodolistFilterCallback","changeTodolistTitleCallback","addTodolistCallback","createTodolist","Grid","container","style","padding","spacing","allTodolistTasks","Paper","to","Alert","elevation","ErrorSnackbar","handleClose","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","App","logoutHandler","AppBar","position","Toolbar","edge","aria-label","Typography","marginLeft","LinearProgress","Container","fixed","exact","path","render","from","top","textAlign","width","CircularProgress","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","todoListId","copyState","stateCopy","forEach","tl","todo","store","createStore","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dab161e6.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers:  {\r\n        'API-KEY': 'fc503820-69cf-441a-add2-ccdccedc3a76'\r\n    }\r\n})\r\n\r\nexport const todolistAPI = {\r\n    updateTodolist(todoId: string, title: string) {\r\n       return  instance.put<ResponseType>(`todo-lists/${todoId}`, {title})\r\n    },\r\n    getTodolists() {\r\n        return instance.get<Array<TodolistType>>(`todo-lists`)\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{item: TodolistType}>>(`todo-lists`, {title})\r\n    },\r\n    deleteTodolist(todoId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todoId}`)\r\n    }\r\n}\r\nexport const tasksAPI = {\r\n    updateTask(todoId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return  instance.put<ResponseType>(`todo-lists/${todoId}/tasks/${taskId}`, model)\r\n    },\r\n    getTasks(todoId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todoId}/tasks`)\r\n    },\r\n    createTask(todoId: string, title: string) {\r\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todoId}/tasks`, {title})\r\n    },\r\n    deleteTask(todoId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todoId}/tasks/${taskId}`)\r\n    }\r\n}\r\nexport const authAPI = {\r\n    login(data: LoginDataRequestType) {\r\n        return instance.post<ResponseType<{userId?: number}>>(`auth/login`, data)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{id: number, email: string, login: string}>>(`auth/me`)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType<{userId?: number}>>('auth/login');\r\n    },\r\n}\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\nexport enum TaskStatuses  {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\nexport type LoginDataRequestType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}","import { Dispatch } from 'redux';\r\nimport {setAppError, setAppStatus} from '../app/App-reducer';\r\nimport {ResponseType} from '../dal/api'\r\n\r\n// generic function\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppError(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppError('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatus('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(setAppError(error.message))\r\n    dispatch(setAppStatus('failed'))\r\n}\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<ReturnType<typeof setAppError> | ReturnType<typeof setAppStatus>>\r\n","import { Dispatch } from 'redux'\r\nimport {setAppError, setAppStatus} from \"../../app/App-reducer\";\r\nimport {authAPI, LoginDataRequestType} from \"../../dal/api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setIsLoggedIn = (value: boolean) => ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n// thunks\r\nexport const loginTC = (data: LoginDataRequestType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatus('loading'))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if(res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedIn(true))\r\n                dispatch(setAppStatus('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const logout = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatus('loading'))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedIn(false))\r\n                dispatch(setAppStatus('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n// types\r\ntype ActionsType =\r\n    | ReturnType<typeof setIsLoggedIn>\r\n    | ReturnType<typeof setAppStatus>\r\n    | ReturnType<typeof setAppError>\r\ntype InitialStateType = {\r\n    isLoggedIn: boolean\r\n}\r\n","import {authAPI} from \"../dal/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setIsLoggedIn} from \"../features/login/auth-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\n\r\nconst initialState: initialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/SET-IS-INITIALIED':\r\n            return {...state, isInitialized: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//Action\r\nexport const setAppStatus = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppError = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppInitialized = (value: boolean) => ({type: 'APP/SET-IS-INITIALIED', value} as const)\r\n//thunk\r\nexport const initializeApp = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatus('loading'))\r\n    authAPI.me().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedIn(true));\r\n            dispatch(setAppStatus('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n        dispatch(setAppInitialized(true));\r\n    })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n// Types\r\ntype ActionsType =\r\n    | ReturnType<typeof setAppInitialized>\r\n    | ReturnType<typeof setAppStatus>\r\n    | ReturnType<typeof setAppError>\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\ntype initialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n    isInitialized: boolean\r\n}","import {Dispatch} from \"redux\";\r\nimport {todolistAPI, TodolistType} from \"../../dal/api\";\r\nimport {RequestStatusType, setAppError, setAppStatus} from \"../../app/App-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer =\r\n    (state: Array<TodolistDomainType> = initialState, action: ActionType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(todo => todo.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: \"all\", entityStatus: \"idle\"}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(todo => todo.id === action.id ? {...todo, title: action.title} : todo)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(todo => todo.id === action.id ? {...todo, filter: action.filter} : todo)\r\n        case \"SET-TODOLISTS\":{\r\n            return action.todolists.map(todo => ({...todo, filter: \"all\", entityStatus: \"idle\"}))\r\n        }\r\n        case \"CHANGE-TODOLIST-ENTITY-STATUS\":\r\n            return state.map(todo => todo.id === action.id ? {...todo, entityStatus: action.entityStatus} : todo)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// Action\r\nexport const setTodolists = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\nexport const changeTodolistEntityStatus = (id: string, entityStatus: RequestStatusType) => ({type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, entityStatus} as const)\r\nexport const removeTodoList = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolist = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitle = (title: string, id: string) => ({type: 'CHANGE-TODOLIST-TITLE', title, id} as const)\r\nexport const changeTodolistFilter = (filter: FilterType, id: string) =>\r\n    ({type: 'CHANGE-TODOLIST-FILTER', filter, id} as const)\r\n// Thunk\r\nexport const fetchTodolists = () => (dispatch: Dispatch<ActionType>) => {\r\n        dispatch(setAppStatus('loading'))\r\n        todolistAPI.getTodolists()\r\n            .then(res => {\r\n                dispatch(setTodolists(res.data))\r\n                dispatch(setAppStatus('succeeded'))\r\n            })\r\n}\r\nexport const deleteTodolis = (todolistId: string) => (dispatch: Dispatch<ActionType>) => {\r\n    dispatch(setAppStatus('loading'))\r\n    dispatch(changeTodolistEntityStatus(todolistId, 'loading'))\r\n        todolistAPI.deleteTodolist(todolistId)\r\n            .then(res => {\r\n                if( res.data.resultCode === 0) {\r\n                    dispatch(removeTodoList(todolistId))\r\n                    dispatch(setAppStatus('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n}\r\nexport const createTodolist = (title: string) => (dispatch: Dispatch<ActionType>) => {\r\n    dispatch(setAppStatus('loading'))\r\n        todolistAPI.createTodolist(title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(addTodolist(res.data.data.item))\r\n                    dispatch(setAppStatus('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n}\r\nexport const updateTodolis = (id: string, title: string) => (dispatch: Dispatch<ActionType>) => {\r\n    dispatch(setAppStatus('loading'))\r\n        todolistAPI.updateTodolist(id, title)\r\n            .then( res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(changeTodolistTitle(id, title))\r\n                    dispatch(setAppStatus('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n}\r\n//types\r\ntype ActionType =\r\n    | ReturnType<typeof changeTodolistEntityStatus>\r\n    | ReturnType<typeof setAppError>\r\n    | ReturnType<typeof setAppStatus>\r\n    | ReturnType<typeof removeTodoList>\r\n    | ReturnType<typeof addTodolist>\r\n    | ReturnType<typeof changeTodolistTitle>\r\n    | ReturnType<typeof changeTodolistFilter>\r\n    | ReturnType<typeof setTodolists>\r\nexport type FilterType = \"all\" | \"active\" | \"completed\"\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterType\r\n    entityStatus: RequestStatusType\r\n}","import {TaskPriorities, tasksAPI, TaskStatuses, TaskType, UpdateTaskModelType} from \"../../../../dal/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {addTodolist, changeTodolistEntityStatus, removeTodoList, setTodolists} from \"../../todolists-reducer\";\r\nimport {RootStateType} from \"../../../../app/store\";\r\nimport {setAppError, setAppStatus} from \"../../../../app/App-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../../../utils/error-utils\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todoId]: state[action.todoId].filter(task => task.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {...state, [action.todoId]: state[action.todoId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]:[]}\r\n        case 'REMOVE-TODOLIST':\r\n            let copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const stateCopy = {...state}\r\n            action.todolists.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy;\r\n        }\r\n        case \"SET-TASKS\": {\r\n            return {...state, [action.todoId]: action.tasks}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// Action creator\r\nexport const setTasks = (tasks: Array<TaskType>, todoId: string) => ({type: 'SET-TASKS', tasks, todoId} as const)\r\nexport const removeTask = (todoId: string, taskId: string) => ({type: 'REMOVE-TASK', todoId, taskId} as const)\r\nexport const addTask = (task: TaskType) => ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (todoId: string, taskId: string, model: UpdateDomainTaskModelType) =>\r\n    ({\r\n    type: 'UPDATE-TASK', todoId, taskId, model\r\n} as const)\r\n//Thunk creator\r\nexport const fetchTasks = (todoId: string) => (dispatch: Dispatch<ActionType>) => {\r\n    dispatch(setAppStatus('loading'))\r\n        tasksAPI.getTasks(todoId)\r\n            .then(res => {\r\n                dispatch(setTasks(res.data.items, todoId))\r\n                dispatch(setAppStatus('succeeded'))\r\n            })\r\n}\r\nexport const deleteTask = (taskId: string, todoId: string) => (dispatch: Dispatch<ActionType>) => {\r\n    dispatch(setAppStatus('loading'))\r\n    dispatch(changeTodolistEntityStatus(todoId, 'loading'))\r\n        tasksAPI.deleteTask(todoId, taskId)\r\n            .then( res => {\r\n                if(res.data.resultCode === 0) {\r\n                    dispatch(removeTask(todoId, taskId))\r\n                    dispatch(setAppStatus('succeeded'))\r\n                    dispatch(changeTodolistEntityStatus(todoId, 'succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n}\r\nexport const createTask = (todoId: string, title: string) => (dispatch: Dispatch<ActionType>) => {\r\n    dispatch(setAppStatus('loading'))\r\n    dispatch(changeTodolistEntityStatus(todoId, 'loading'))\r\n        tasksAPI.createTask(todoId, title)\r\n            .then(res => {\r\n                if(res.data.resultCode === 0) {\r\n                    dispatch(addTask(res.data.data.item))\r\n                    dispatch(setAppStatus('succeeded'))\r\n                    dispatch(changeTodolistEntityStatus(todoId, 'succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n}\r\nexport const updateTask = (todoId: string, taskId: string, domainModel: UpdateDomainTaskModelType) => {\r\n    return (dispatch: Dispatch<ActionType>, getState: () => RootStateType) => {\r\n        dispatch(setAppStatus('loading'))\r\n        dispatch(changeTodolistEntityStatus(todoId, 'loading'))\r\n        const state = getState()\r\n        const task = state.tasks[todoId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n        tasksAPI.updateTask(todoId, taskId, apiModel)\r\n            .then(res => {\r\n                if(res.data.resultCode === 0) {\r\n                    dispatch(updateTaskAC(todoId, taskId, apiModel))\r\n                    dispatch(setAppStatus('succeeded'))\r\n                    dispatch(changeTodolistEntityStatus(todoId, 'succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n        })\r\n    }\r\n}\r\n//types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\ntype ActionType =\r\n    | ReturnType<typeof changeTodolistEntityStatus>\r\n    | ReturnType<typeof setAppError>\r\n    | ReturnType<typeof setAppStatus>\r\n    | ReturnType<typeof removeTask>\r\n    | ReturnType<typeof addTask>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | ReturnType<typeof addTodolist>\r\n    | ReturnType<typeof removeTodoList>\r\n    | ReturnType<typeof setTodolists>\r\n    | ReturnType<typeof setTasks>\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}","import React, {ChangeEvent, useState, KeyboardEvent} from \"react\";\r\nimport { IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\nexport type AddItemFormType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo( (props: AddItemFormType) => {\r\n\r\n    const [title, setTitle] = useState('')\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(event.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (event.code === \"Enter\") {\r\n            addItem()\r\n        }\r\n    }\r\n    return (<div>\r\n        <TextField size='small'\r\n                   disabled={props.disabled}\r\n                   value={title}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   onChange={onChangeHandler}\r\n                   error={!!error}\r\n                   label='Title'\r\n                   helperText={error}\r\n        />\r\n        <IconButton color='primary' onClick={addItem} disabled={props.disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>)\r\n} )","import React, {ChangeEvent, useCallback, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\nexport type EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [title, setTitle] = useState(props.value)\r\n\r\n    const onChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(event.currentTarget.value)\r\n    }, [])\r\n\r\n    const editModeHandler = useCallback(() => {\r\n        setEditMode(!editMode)\r\n        props.onChange(title)\r\n    }, [editMode, props, title])\r\n\r\n    return (editMode\r\n            ? <TextField size='small' onChange={onChange} value={title} autoFocus onBlur={editModeHandler}/>\r\n            : <span onDoubleClick={editModeHandler}>{title}</span>\r\n    )\r\n})","import {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../../../../component/editableSpan/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport React, {ChangeEvent, useCallback} from \"react\";\r\nimport {TaskStatuses} from \"../../../../dal/api\";\r\nimport {RequestStatusType} from \"../../../../app/App-reducer\";\r\n// Types\r\nexport type TaskPropsType = {\r\n    id: string\r\n    status: TaskStatuses\r\n    title: string\r\n    changeTaskTitle:(todolistId: string, id: string, newTitle: string) => void\r\n    removeTask: (id: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    todoId: string\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport const Task = React.memo( (props: TaskPropsType) => {\r\n\r\n    const onRemoveHandler = useCallback( () => {\r\n        props.removeTask(props.id, props.todoId)\r\n    }, [props] )\r\n    const onChangeHandler = useCallback( (event: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeTaskStatus(props.id, event.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New, props.todoId)\r\n    } , [props] )\r\n    const onChangeTitle = useCallback( (newTitle: string) => {\r\n        props.changeTaskTitle(props.todoId, props.id, newTitle)\r\n    }, [props] )\r\n    \r\n    return <div key={props.id} className={props.status === TaskStatuses.Completed ? 'is-done' : \"\"}>\r\n        <Checkbox color='primary' checked={props.status === TaskStatuses.Completed} onChange={onChangeHandler}/>\r\n        <EditableSpan value={props.title} onChange={onChangeTitle}/>\r\n        <IconButton color='primary' size='small' onClick={onRemoveHandler} disabled={props.entityStatus === 'loading'}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n} )\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {AddItemForm} from \"../../../component/addItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../../component/editableSpan/EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Task} from \"./task/Task\";\r\nimport {FilterType, TodolistDomainType} from \"../todolists-reducer\";\r\nimport {TaskStatuses, TaskType} from \"../../../dal/api\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTasks} from \"./task/tasks-reducer\";\r\n\r\n\r\nexport type TodolistPropsType = {\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTodolistFilter: (filter: FilterType, todolistId: string) => void\r\n    removeTask: (id: string, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTaskTitle: (todolistId: string, id: string, newTitle: string) => void\r\n    changeTodolistTitle: (todolistId: string, newTitle: string) => void\r\n    tasks: Array<TaskType>\r\n    todolist: TodolistDomainType\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo( ({demo = false, ...props}: TodolistPropsType) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasks(props.todolist.id))\r\n    }, [dispatch, props.todolist.id])\r\n\r\n    // добовление таски\r\n    const addTask = useCallback( (title: string) => {\r\n            props.addTask(title, props.todolist.id)\r\n    },[props])\r\n    const onChangeTodolistTitle = useCallback( (newTitle: string) => {\r\n        props.changeTodolistTitle(newTitle, props.todolist.id)\r\n    }, [props] )\r\n    // удаление тудулиста\r\n    const removeTodolist = useCallback( () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    } , [props] )   // пачка колюэков на кнопки для фильтрации\r\n    const onAllClickHandler = useCallback( () => props.changeTodolistFilter('all', props.todolist.id) ,[props] )\r\n    const onActiveClickHandler = useCallback( () => props.changeTodolistFilter('active', props.todolist.id), [props] )\r\n    const onCompleteClickHandler = useCallback( () => props.changeTodolistFilter('completed', props.todolist.id), [props])\r\n\r\n    let tasksForTodo = props.tasks\r\n\r\n    if(props.todolist.filter === 'active') {\r\n        tasksForTodo = props.tasks.filter(task => task.status === TaskStatuses.New)\r\n    }\r\n    if(props.todolist.filter === 'completed') {\r\n        tasksForTodo = props.tasks.filter(task => task.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n            <EditableSpan value={props.todolist.title} onChange={onChangeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n             <Delete/>\r\n            </IconButton>\r\n            </h3>\r\n                <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n            <div>\r\n                {\r\n                    tasksForTodo.map(task => {\r\n                        return <Task key={task.id}\r\n                                     entityStatus={props.todolist.entityStatus}\r\n                                     id={task.id}\r\n                                     status={task.status}\r\n                                     title={task.title}\r\n                                     todoId={props.todolist.id}\r\n                                     changeTaskStatus={props.changeTaskStatus}\r\n                                     removeTask={props.removeTask}\r\n                                     changeTaskTitle={props.changeTaskTitle}/>\r\n                    })\r\n                }\r\n            </div>\r\n            <div>\r\n                <Button variant={props.todolist.filter === \"all\" ? \"contained\" : \"text\"} color='primary'\r\n                        onClick={onAllClickHandler}>All</Button>\r\n                <Button variant={props.todolist.filter === \"active\" ? \"contained\" : \"text\"} color='primary'\r\n                        onClick={onActiveClickHandler}>Active</Button>\r\n                <Button variant={props.todolist.filter === \"completed\" ? \"contained\" : \"text\"} color='primary'\r\n                        onClick={onCompleteClickHandler}>Completed</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n} )","import {TaskStatuses} from \"../../dal/api\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../../app/store\";\r\nimport {\r\n    changeTodolistFilter, createTodolist,\r\n    deleteTodolis,\r\n    fetchTodolists,\r\n    FilterType,\r\n    TodolistDomainType, updateTodolis\r\n} from \"./todolists-reducer\";\r\nimport React, {useCallback, useEffect} from \"react\";\r\nimport {createTask, deleteTask, TasksStateType, updateTask} from \"./todolist/task/tasks-reducer\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {AddItemForm} from \"../../component/addItemForm/AddItemForm\";\r\nimport {Todolist} from \"./todolist/Todolist\";\r\nimport {RequestStatusType} from \"../../app/App-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList = ({demo = false}) => {\r\n\r\n    const todoLists = useSelector<RootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<RootStateType, TasksStateType>(state => state.tasks)\r\n    const status = useSelector<RootStateType, RequestStatusType>(state => state.app.status)\r\n    const isLoggedIn = useSelector<RootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(fetchTodolists())\r\n    }, [demo, dispatch, isLoggedIn])\r\n\r\n    // добовление task\r\n    const addTaskCallback = useCallback((title: string, todolistId: string) => {\r\n        dispatch(createTask(todolistId, title))\r\n    }, [dispatch])\r\n\r\n    // изменение фильтра task\r\n    const changeTaskStatusCallback = useCallback((id: string, status: TaskStatuses, todolistId: string) => {\r\n        dispatch(updateTask(todolistId, id, {status}))\r\n    }, [dispatch])\r\n\r\n    // изменение заголовка task\r\n    const changeTaskTitleCallback = useCallback((todolistId: string, id: string, newTitle: string,) => {\r\n        dispatch(updateTask(todolistId, id, {title: newTitle}))\r\n    }, [dispatch])\r\n\r\n    // удаление task\r\n    const removeTaskCallback = useCallback((todolistId: string, id: string) => {\r\n        dispatch(deleteTask(todolistId, id))\r\n    }, [dispatch])\r\n    // удаление todolist\r\n    const removeTodolistCallback = useCallback((id: string) => {\r\n        dispatch(deleteTodolis(id))\r\n    }, [dispatch])\r\n    // изменение отоброжающихся тасок в todolist\r\n    const changeTodolistFilterCallback = useCallback((filter: FilterType, todolistId: string) => {\r\n        dispatch(changeTodolistFilter(filter, todolistId))\r\n    }, [dispatch])\r\n    // изменение заголовка todolist\r\n    const changeTodolistTitleCallback = useCallback((newTitle: string, todolistId: string) => {\r\n        dispatch(updateTodolis(todolistId, newTitle))\r\n    }, [dispatch])\r\n    // добовление todolist\r\n    const addTodolistCallback = useCallback((title: string) => {\r\n        dispatch(createTodolist(title))\r\n    }, [dispatch])\r\n\r\n    if(!isLoggedIn) {\r\n        return <Redirect to={'/login'} />\r\n    }\r\n\r\n    return <><Grid container style={{padding: \"20px\"}}>\r\n        <AddItemForm addItem={addTodolistCallback} disabled={status === 'loading'}/>\r\n    </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todoLists.map(todolist => {\r\n\r\n                    let allTodolistTasks = tasks[todolist.id]\r\n\r\n                    return <Grid item key={todolist.id}>\r\n                        <Paper style={{padding: \"10px\"}}>\r\n                            <Todolist todolist={todolist}\r\n                                      key={todolist.id}\r\n                                      removeTask={removeTaskCallback}\r\n                                      tasks={allTodolistTasks}\r\n                                      changeTodolistFilter={changeTodolistFilterCallback}\r\n                                      addTask={addTaskCallback}\r\n                                      changeTodolistTitle={changeTodolistTitleCallback}\r\n                                      removeTodolist={removeTodolistCallback}\r\n                                      changeTaskTitle={changeTaskTitleCallback}\r\n                                      changeTaskStatus={changeTaskStatusCallback}\r\n                                      demo={demo}/>\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid></>\r\n}","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../../app/store\";\r\nimport {setAppError} from \"../../app/App-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<RootStateType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppError(null))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {RootStateType} from \"../../app/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const isLoggedIn = useSelector<RootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Invalid password length';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if(isLoggedIn) {\r\n        return <Redirect to={'/'} />\r\n    }\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email\r\n                            ? <div style={{color: 'red'}}>{formik.errors.email}</div>\r\n                            : null\r\n                        }\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password\r\n                            ? <div style={{color: 'red'}}>{formik.errors.password}</div>\r\n                            : null\r\n                        }\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}/>}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useCallback, useEffect} from 'react';\nimport './App.css';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport {CircularProgress, Container, LinearProgress} from \"@material-ui/core\";\nimport {TodolistsList} from \"../features/todolists/TodolistsList\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {RootStateType} from \"./store\";\nimport {initializeApp, RequestStatusType} from \"./App-reducer\";\nimport {ErrorSnackbar} from \"../component/errorSnackbar/ErrorSnackbar\";\nimport {Route, Switch, Redirect} from 'react-router-dom';\nimport {Login} from \"../features/login/Login\";\nimport {logout} from \"../features/login/auth-reducer\";\n\ntype PropsType = {\n    demo?: boolean\n}\n\nfunction App({demo = false}: PropsType) {\n\n    const status = useSelector<RootStateType, RequestStatusType>(state => state.app.status)\n    const isInitialized = useSelector<RootStateType, boolean>(state => state.app.isInitialized)\n    const isLoggedIn = useSelector<RootStateType, boolean>(state => state.auth.isLoggedIn)\n    const dispatch = useDispatch()\n    useEffect(() => {\n        dispatch(initializeApp())\n    }, [dispatch])\n\n    const logoutHandler = useCallback(() => {\n        dispatch(logout())\n    }, [])\n\n    if (!isInitialized) {\n        return <div\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\n            <CircularProgress/>\n        </div>\n    }\n\n    return (\n        <div className=\"App\">\n            <ErrorSnackbar/>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                        <MenuIcon/>\n                    </IconButton>\n                    <Typography variant=\"h6\">\n                        News\n                    </Typography>\n                    {isLoggedIn && <Button style={{marginLeft : 'auto'}} color=\"inherit\" onClick={logoutHandler}>log out</Button>}\n                </Toolbar>\n                {status === 'loading' && <LinearProgress color=\"secondary\"/>}\n            </AppBar>\n            <Container fixed>\n                <Switch>\n                    <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\n                    <Route exact path={'/login'} render={() => <Login/>}/>\n                    <Route exact path={'/404'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\n                    <Redirect from={'*'} to={'/404'}/>\n                </Switch>\n            </Container>\n        </div>\n    );\n}\n\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {tasksReducer} from \"../features/todolists/todolist/task/tasks-reducer\";\r\nimport {todolistsReducer} from \"../features/todolists/todolists-reducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport { appReducer } from \"./App-reducer\";\r\nimport {authReducer} from \"../features/login/auth-reducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport type RootStateType = ReturnType<typeof rootReducer>","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./app/store\";\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <BrowserRouter>\n                <App/>\n            </BrowserRouter>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}